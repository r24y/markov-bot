In addition to your official SRC-approved projects, I know you are also trying to make progress on several additional initiatives like the reference project, reusable components using WebComponents, and stumbling-detection hacking.
It's really hard to juggle multiple things, especially when it's almost impossible to get time together when you're all on different SRC projects.
I'm fine with whatever, though the Friday afternoons seem like a great time to do it. It's the end of the week, people may choose to skip it to stay home or whatever, it gives people a place outside of 186 to do their regular work uninterrupted (and it can be since its a Friday, where meetings tend to not be), and you have that "end of week" feel.
Yes, AAS only hits the application's endpoint(s). The style here is "act like a user". This means that HealthCheck should go deep enough to give a good indication that the application and its dependencies are functioning for the types of interactions a user is likely to require. That is, this is not just a check to see that the server can respond to an HTTP request. For example, if the app is a CRUD app, the check should include a write/read to the DB schema. This would test not only that the DB is alive, but that the access rights to the schema are still valid, etc. I've never heard it described this way, but as I write this I guess you could call this Aspect Oriented testing.
As I wrote earlier, an "act like a user" check isn't designed to pinpoint the problem, it's basically a way for you to find out first (before your users) that something is wrong. At that point, you can then probe all sorts of things (deeper healchecks, logs, dependent systems, etc.) as part of the diagnostic process. These "act like a user" tests (a lot of words, but I want to avoid ambiguous terms) can then be particularly helpful to quickly determine that a system has recovered. For example, say the fault was a bricked NFS server that is restored successfully, but the application does not automatically remount the drive. The check acts like a quick regression test and will help to identify that all is not well with the "application /system" even though the dependent component is alive and well.
So there are multiple potential ways of monitoring, and our current standard (and supported and organizationally scalable solution) remains as following the "act like a user" approach using AAS to monitor application-exposed HTTP HealthCheck endpoints. Certainly there may be exceptions and unique configurations for certain platforms, but for most applications, this approach should be reasonable and effective.
At the moment, the best approach for NIBR or Engineering particular, is to follow whatever standards are there.  If what i mention is not a standard, then best not do it.  From what i can gather, you will need to create a HealthCheck service within your application that checks all the things you need following the template provided.  Then I would assume you then reference this into AAS for the alerting.  AAS at the moment has no portal to view the application dependencies.  I will take the debate offline.
Also, as the owner of  one of the SMF services, I would hate to see every MicroService, web service, application, and monitoring tool, hitting my web service just to see if it is alive.  A properly configured monitoring tool reduces this redundent network traffic and monitoring.
Ken, I understand your side, but AAS as far as i can see on the portal only monitors http endpoints.  For example it does not monitor DBs, daemons, windows services, etc, which we see from Daisy's requirements.  Now unless they want to add more development time to then create a web service that does the HealthCheck and then put that into AAS.  But the way we monitor web services is insufficient.  Please refer to my ppt that explains how to truley monitor a webservice.  Hitting an endpoint is 1 of many parts.
